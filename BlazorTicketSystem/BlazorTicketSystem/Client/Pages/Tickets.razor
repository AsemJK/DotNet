@page "/tickets"
@using BlazorTicketSystem.Client.Components
@using BlazorTicketSystem.Shared;
@using BlazorTicketSystem.Shared.ViewModels
@inject HttpClient Http
@inject IDialogService DialogService
@inject NavigationManager navationManager



<div class="col-lg-4">
    <TicketForm OnSubmitCallback="@Refresh"></TicketForm>
</div>

<MudTable Items="@tickets" Bordered="true" Hover="true" Striped="true" Dense="true" Filter="new Func<Ticket,bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1">
    <NoRecordsContent>
        Loading...
    </NoRecordsContent>
    <ToolBarContent>
        <MudText Typo="Typo.h6">Tickets</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh></MudTh>
        <MudTh>#</MudTh>
        <MudTh>Subject</MudTh>
        <MudTh>Member</MudTh>
        <MudTh>Tenant</MudTh>
        <MudTh>Cr Date</MudTh>
        <MudTh>Status</MudTh>
        <MudTh>Last Update</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudButton OnClick="(e) => ChangeTicketStatus(context.Id)" Variant="Variant.Filled" Color="Color.Primary">
            <MudIcon Icon="@Icons.Filled.ChangeCircle"></MudIcon>
        </MudButton>
        <MudButton OnClick="(e) => TicketGoToDetails(context.Id.ToString())" Variant="Variant.Filled" Color="Color.Primary">
            <MudIcon Icon="@Icons.Filled.OpenInNew"></MudIcon>
        </MudButton>
        <MudTd DataLabel="#">@context.Id</MudTd>
        <MudTd DataLabel="Subject">@((MarkupString)context.ToDoSubject)</MudTd>
        <MudTd DataLabel="Member Name">@context.TeamMember</MudTd>
        <MudTd DataLabel="Tenant">@context.TenantName</MudTd>
        <MudTd DataLabel="Cr Date">@context.CreationDate</MudTd>
        <MudTd DataLabel="Last Status">@context.LastStatus</MudTd>
        <MudTd DataLabel="Last Update">@context.LastUpdate</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager PageSizeOptions="pageSizeOptions" />
    </PagerContent>
</MudTable>


@code {

    private List<Ticket> tickets;

    private string searchString1 = "";
    private Ticket selectedItem1 = null;
    private HashSet<Ticket> selectedItems = new HashSet<Ticket>();
    private int[] pageSizeOptions = new int[] { 5, 10, 15 };

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        tickets = await Http.GetFromJsonAsync<List<Ticket>>("api/Ticket");
        StateHasChanged();
    }
    public async void Refresh()
    {
        await LoadData();
    }

    private bool FilterFunc1(Ticket element) => FilterFunc(element, searchString1);

    private bool FilterFunc(Ticket element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.ToDoSubject.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.TeamMember.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.TenantName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Id.ToString().Equals(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private async Task ChangeTicketStatus(int tktId)
    {
        var parameters = new DialogParameters { ["ticketId"] = tktId };
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var dialog = DialogService.Show<TicketStatus>("Simple Dialog", parameters, options);
        var result = await dialog.Result;
        Ticket ticket = new Ticket();
        ticket.Id = tktId;
        switch (Common.ToIntConvertObject(result.Data, 0).ToString())
        {
            case "1":
                break;
                ticket.LastStatus = "New";
                await Http.PostAsJsonAsync<Ticket>("api/Ticket/UpdateTicketStatus", ticket);
            case "2":
                ticket.LastStatus = "UnderReview";
                await Http.PostAsJsonAsync<Ticket>("api/Ticket/UpdateTicketStatus", ticket);
                break;
            case "3":
                ticket.LastStatus = "Done";
                await Http.PostAsJsonAsync<Ticket>("api/Ticket/UpdateTicketStatus", ticket);
                break;
            default:
                ticket.LastStatus = "New";
                await Http.PostAsJsonAsync<Ticket>("api/Ticket/UpdateTicketStatus", ticket);
                break;
        }
        Refresh();
    }
    private void TicketGoToDetails(string id)
    {
        navationManager.NavigateTo("/ticket/" + id);
    }
}