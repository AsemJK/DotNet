@page "/tickets"
@using BlazorTicketSystem.Client.Components
@using BlazorTicketSystem.Shared;
@using BlazorTicketSystem.Shared.ViewModels
@inject HttpClient Http
@inject IDialogService DialogService

<AuthorizeView>
    <NotAuthorized>
        <h1>Welcome, Please login first  </h1>
    </NotAuthorized>
    <Authorized>

        <div class="col-lg-4">
            <TicketForm OnSubmitCallback="@Refresh"></TicketForm>
        </div>

        @if (tickets == null)
        {
            <MudProgressCircular Style="margin-left: 40%" Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
        }

        <MudTable Items="@tickets" Bordered="true" Context="tableContext" Hover="true" Striped="true" Dense="true" Filter="new Func<Ticket,bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1">
            <NoRecordsContent>
                Loading...
            </NoRecordsContent>
            <ToolBarContent>
                <MudText Typo="Typo.h6">Tickets</MudText>
                <MudSpacer />
                <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh></MudTh>
                <MudTh>#</MudTh>
                <MudTh>Subject</MudTh>
                <MudTh>Member</MudTh>
                <MudTh>Tenant</MudTh>
                <MudTh>Cr Date</MudTh>
                <MudTh>Status</MudTh>
                <MudTh>Last Update</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudButton OnClick="(e) => ChangeTicketStatus(tableContext.Id)" Variant="Variant.Filled" Color="Color.Primary" Style="margin:1px">
                    <MudIcon Icon="@Icons.Filled.ChangeCircle"></MudIcon>
                </MudButton>
                <MudButton OnClick="(e) => TicketGoToDetails(tableContext.Id.ToString())" Variant="Variant.Filled" Color="Color.Primary" Style="margin:1px" title="Open Ticket" Target="_Blank">
                    <MudIcon Icon="@Icons.Filled.OpenInNew"></MudIcon>
                </MudButton>
                <MudTd DataLabel="#">@tableContext.Id</MudTd>
                <MudTd DataLabel="Subject" Style="text-align: center">@((MarkupString)tableContext.ToDoSubject)</MudTd>
                    <MudTd DataLabel="Member Name">@tableContext.TeamMember</MudTd>
                    <MudTd DataLabel="Tenant">@tableContext.TenantName</MudTd>
                    <MudTd DataLabel="Cr Date">@tableContext.CreationDate</MudTd>
                    <MudTd DataLabel="Last Status">@tableContext.LastStatus</MudTd>
                    <MudTd DataLabel="Last Update">@tableContext.LastUpdate</MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager PageSizeOptions="pageSizeOptions" />
                </PagerContent>
            </MudTable>

        </Authorized>
    </AuthorizeView>


    @code {

    private List<Ticket> tickets;

    private string searchString1 = "";
    private Ticket selectedItem1 = null;
    private HashSet<Ticket> selectedItems = new HashSet<Ticket>();
    private int[] pageSizeOptions = new int[] { 5, 10, 15 };

    protected override async Task OnInitializedAsync()
    {
        var st = await AuthStateProvider.GetAuthenticationStateAsync();
        if (st.User != null)
            await LoadData();
    }

    private async Task LoadData()
    {
        tickets = await Http.GetFromJsonAsync<List<Ticket>>("api/Ticket");
        StateHasChanged();
    }
    public async void Refresh()
    {
        await LoadData();
    }

    private bool FilterFunc1(Ticket element) => FilterFunc(element, searchString1);

    private bool FilterFunc(Ticket element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.ToDoSubject.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.TeamMember.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.TenantName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Id.ToString().Equals(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private async Task ChangeTicketStatus(int tktId)
    {
        var parameters = new DialogParameters { ["ticketId"] = tktId };
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var dialog = DialogService.Show<TicketStatus>("Simple Dialog", parameters, options);
        var result = await dialog.Result;
        Ticket ticket = new Ticket();
        ticket.Id = tktId;
        switch (Common.ToIntConvertObject(result.Data, 0).ToString())
        {
            case "1":
                break;
                ticket.LastStatus = "New";
                await Http.PostAsJsonAsync<Ticket>("api/Ticket/UpdateTicketStatus", ticket);
            case "2":
                ticket.LastStatus = "UnderReview";
                await Http.PostAsJsonAsync<Ticket>("api/Ticket/UpdateTicketStatus", ticket);
                break;
            case "3":
                ticket.LastStatus = "Done";
                await Http.PostAsJsonAsync<Ticket>("api/Ticket/UpdateTicketStatus", ticket);
                break;
            default:
                ticket.LastStatus = "New";
                await Http.PostAsJsonAsync<Ticket>("api/Ticket/UpdateTicketStatus", ticket);
                break;
        }
        Refresh();
    }
    private void TicketGoToDetails(string id)
    {
        navationManager.NavigateTo("/ticket/" + id);
    }
}